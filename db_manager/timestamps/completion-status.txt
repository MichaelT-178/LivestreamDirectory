Stonebridge (Furch) OM32SM ✅
Fender Telecaster ✅
Asturias Standard S ✅
12-String Guitar ✅
Mandolin ✅
Harmonica ✅
Blues Slide ✅
(BH) - Brickhouse Demo ✅
(FBG) - Furch Blue Gc-SA ✅
(DX1R) - Martin DX1R ✅
(MDT) - Maestro Double Top ✅
(M15M) - Martin 00-15m ✅
(NST) - Norman ST68 ✅
(OOM) - Furch OOM-SR-DB ✅
(SAS) - Seagull Artist Studio ✅
(SGI) - SGI Avenir CW20 ✅
(SOM) - Stonebridge OM35ASR-DB ✅
(FV2) - Furch Vintage 2 RS-SR ✅
(DM75) - DeArmond M75 ✅
(MFF) - Maestro Fan Fretted Singa Flamed maple / Adirondack ✅
(GPPCB) - Godin Progression Plus Cherry Burst RN ✅
(GSDG) - Godin Stadium '59 Desert Green RN ✅
(GPRG) - Godin Passion RG-3 Indigo Burst RN ✅
(GLTC) - Godin 5th Ave Uptown GT LTD Trans Cream ✅
(MHD) - Martin HD-28 ✅
(FVD) - Furch Vintage 2 D-SR ✅
(LPE) - La Patrie Etude ✅ 
(BSG) - Boucher SG-52 ✅
(OOMV1) - Furch OOM Vintage 1 ❌
(FBD) - Furch Blue D-CM ❌
(BSGI) - Boucher SG-52-I ❌
(GRSG) - Godin Rialto JR Satina Gray HG Q-Discrete ❌
(GMNC) - Godin Metropolis Natural Cedar EQ ❌
(GMLN) - Godin Metropolis LTD Natural HG EQ ❌
(GMLHB) - Godin Metropolis LTD Havana Burst HG EQ ❌
(GFCHN) - Godin Fairmount Concert Hall Natural HG EQ ❌
(BHG) - Boucher HG-56 ❌
(FOSG) - Furch OM22TSW-C-DB SGI ❌
(FG) - Furch G25CR-C ❌
(FSD) - Furch *SGI* D22TSR ❌
(FOB) - Furch OM34TSR-DB B2 ❌
(BDC) - Breedlove Discovery Concert CE ❌
(NSPBU) - Norman ST40 Parlor Burnt Umber ❌
(NBDA) - Norman B15 Dark Almond ❌
(NBBU) - Norman B20 Burnt Umber ❌
(NSCG) - Norman ST40 CW GT Presys ❌
(NSTCW) - Norman ST68 CW ❌
(SD22) - Stonebridge D22SR ❌





{ "(OOMV1)" , "Acoustic Guitar, (OOMV1) - Furch OOM Vintage 1" },
{ "(FBD)" , "Acoustic Guitar, (FBD) - Furch Blue D-CM" },
{ "(BSGI)" , "Acoustic Guitar, (BSGI) - Boucher SG-52-I" },
{ "(GRSG)" , "Acoustic Guitar, (GRSG) - Godin Rialto JR Satina Gray HG Q-Discrete" },
{ "(GMNC)" , "Acoustic Guitar, (GMNC) - Godin Metropolis Natural Cedar EQ" },
{ "(GMLN)" , "Acoustic Guitar, (GMLN) - Godin Metropolis LTD Natural HG EQ" },
{ "(GMLHB)" , "Acoustic Guitar, (GMLHB) - Godin Metropolis LTD Havana Burst HG EQ" },
{ "(GFCHN)" , "Acoustic Guitar, (GFCHN) - Godin Fairmount Concert Hall Natural HG EQ" },
{ "(BHG)" , "Acoustic Guitar, (BHG) - Boucher HG-56" },
{ "(FOSG)" , "Acoustic Guitar, (FOSG) - Furch OM22TSW-C-DB SGI" },
{ "(FG)" , "Acoustic Guitar, (FG) - Furch G25CR-C" },
{ "(FSD)" , "Acoustic Guitar, (FSD) - Furch *SGI* D22TSR" },
{ "(FOB)" , "Acoustic Guitar, (FOB) - Furch OM34TSR-DB B2" },
{ "(BDC)" , "Acoustic Guitar, (BDC) - Breedlove Discovery Concert CE" },
{ "(NSPBU)" , "Acoustic Guitar, (NSPBU) - Norman ST40 Parlor Burnt Umber" },
{ "(NBDA)" , "Acoustic Guitar, (NBDA) - Norman B15 Dark Almond" },
{ "(NBBU)" , "Acoustic Guitar, (NBBU) - Norman B20 Burnt Umber" },
{ "(NSCG)" , "Acoustic Guitar, (NSCG) - Norman ST40 CW GT Presys" },
{ "(NSTCW)" , "Acoustic Guitar, (NSTCW) - Norman ST68 CW" },
{ "(SD22)" , "Acoustic Guitar, (SD22) - Stonebridge D22SR" },









BH - GOOD
FBG - GOOD
DX1R - GOOD
MDT - GOOD
M15M - GOOD
NST - GOOD
OOM - GOOD
SAS - GOOD
SGI - GOOD
SOM - GOOD
FV2 - GOOD
DM75 - GOOD
MFF - GOOD
GPPCB - GOOD
GSDG - GOOD
GPRG - GOOD
GLTC - GOOD
MHD - GOOD
FVD - GOOD
BSG - GOOD

OOMV1 - BAD - 1
FBD - BAD - 1
BSGI - BAD - 1
GRSG - BAD - 1
GMNC - BAD - 1
GMLN - BAD - 1
GMLHB - BAD - 1
GFCHN - BAD - 1
BHG - BAD - 1
FOSG - BAD - 1
FG - BAD - 1
FSD - BAD - 1
FOB - BAD - 1
BDC - BAD - 1
NSPBU - BAD - 1
NBDA - BAD - 1
NBBU - BAD - 1
NSCG - BAD - 1
NSTCW - BAD - 1
SD22 - BAD


steps 
1. All timestamps 
2. Helper.cs
3. AlgorithmHelper.cs



"OOMV1"
"FBD"
"BSGI"
"GRSG"
"GMNC"
"GMLN"
"GMLHB"
"GFCHN"
"BHG"
"FOSG"
"FG"
"FSD"
"FOB"
"BDC"
"NSPBU"
"NBDA"
"NBBU"
"NSCG"
"NSTCW"
"SD22"







    // /**
    //  * Gets the instrument from a song title based on it's keys, which will be
    //  * added to the currentInstruments attribute if it's not already in it. 
    //  * The currentInstruments attribute will become the Instruments attribute 
    //  * of the song objects in the database.
    //  * @param songWithKeys The song with it's keys 
    //  * @param currentInstruments The attribute which contains all the songs 
    //  *        instruments so far.
    //  * @return The instrument string based on the key with comma. Ex: "Classical Guitar, "
    //  */
    // public static string GetInstrumentsFromSong(string songWithKeys, string currentInstruments)
    // {
    //     Dictionary<string, string> instrumentMapping = new Dictionary<string, string>
    //     {
    //         {"(BH)", "(BH) - Brickhouse Demo"},
    //         {"(B)", "(B) - Furch Blue Gc-SA"},
    //         {"(DX1R)", "(DX1R) - Martin DX1R"},
    //         {"(MDT)", "(MDT) - Maestro Double Top"},
    //         {"(M)", "(M) - Martin 00-15m"},
    //         {"(NST)", "(NST) - Norman ST68"},
    //         {"(OOM)", "(OOM) - Furch OOM-SR-DB"},
    //         {"(SAS)", "(SAS) - Seagull Artist Studio"},
    //         {"(SGI)", "(SGI) - SGI Avenir CW20"},
    //         {"(SOM)", "(SOM) - Stonebridge OM35ASR-DB"},
    //         {"(V)", "(V) - Furch Vintage 2 RS-SR"},
    //         {"(Mandolin)", "Mandolin"},
    //         {"(Electric Song)", "Electric Guitar"},
    //         {"(Classical Guitar)", "Classical Guitar"},
    //         {"(Blues Slide)", "Blues Slide"},
    //         {"(Electric riff)", "Electric Guitar"},
    //         {"(Rein Rutnik Performance)", "Harmonica"},
    //         {"(12-String)", "12-String Guitar"}
    //     };

    //     foreach (var keyInstrumentPair in instrumentMapping)
    //     {
    //         string key = keyInstrumentPair.Key;
    //         string instrument = keyInstrumentPair.Value;

    //         if (songWithKeys.Contains(key) && !currentInstruments.Contains(instrument))
    //         {
    //             return instrument + ", ";
    //         }
    //     }

    //     if (songWithKeys.Contains("Forget Her") || songWithKeys.Contains("Electric Riff Session"))
    //     {
    //          return "Electric Guitar, ";
    //     }
        
    //     return "";
    // }